///////////////////////////////////////////////////////////
//  InvokerSubjectContext.cs
//  Implementation of the Class InvokerSubjectContext
//  Generated by Enterprise Architect
//  Created on:      18-Jan-2022 11:15:08 PM
//  Original author: Administrator
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using Common.Patterns;
namespace Common.Patterns {
	/// <summary>
	/// This class asks the command to carry out the request.
	/// </summary>
	public class InvokerSubjectContext : Subject {

		private double budget;
		private string house;
		private List<Patterns.Command> command;
		private Patterns.Observer observers;
		private Patterns.State state;

		public InvokerSubjectContext(double budget, string house, UseBudgetCommand command){
			this.budget = budget;	
			this.house = house;
			state = new NetPositiveState();
			Attach(new ConcreteObserver(this));
			this.command = new List<Command>();
			SetCommand(command);
		}

		~InvokerSubjectContext(){

		}
        public State State { get => state; set => state = value; }
		public double Budget { get => budget; set => budget = value; }
		public string House { get => house; set => house = value; }
		public List<Command> Command { get => command; }

		public override void Attach(Observer observer)
        {
			observers = observer;
        }

        /// 
        /// <param name="state"></param>
        public void Context(State state)
		{
			state.Handle(this);
		}

        public override void Detach(Observer observer)
        {
			observers = null;
        }

        /// 
        /// <param name="command"></param>
        public double ExecuteCommand(Command command){
			try
			{
				double ret = command.Execute();
				if (ret < 0 && state is NetPositiveState)
				{
					Context(state);
				}
				if (ret >= 0 && state is NetNegativeState)
				{
					Context(state);
				}
				return ret;
            }
            catch
            {
				return -1011011000;
            }
		}

        public override void Notify()
        {
			observers.Update();
        }

        public void Request(){
            Console.WriteLine("CURRENT STATE FOR " + house +" ...");
		}

		/// 
		/// <param name="command"></param>
		public void SetCommand(Command command){
			this.command.Add(command);
		}

		/// 
		/// <param name="command"></param>
		public double UnexecuteCommand(Command command)
		{
			double ret = command.Unexecute();
			if (ret < 0 && state is NetPositiveState)
			{
				Context(state);
			}
			if (ret >= 0 && state is NetNegativeState)
			{
				Context(state);
			}
			return ret;
		}

	}//end InvokerSubjectContext

}//end namespace Patterns