///////////////////////////////////////////////////////////
//  ConcreteObserver.cs
//  Implementation of the Class ConcreteObserver
//  Generated by Enterprise Architect
//  Created on:      18-Jan-2022 11:15:08 PM
//  Original author: Administrator
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using Common.Patterns;
namespace Common.Patterns {
	/// <summary>
	/// This class maintains a reference to a ConcreteSubject object, stores state that
	/// should stay consistent with the subject's and implements the Observer updating
	/// interface to keep its state consistent with the subject's.
	/// </summary>
	public class ConcreteObserver : Observer {

		private String observerState;
		private Subject subject;


		~ConcreteObserver(){

		}

		/// 
		/// <param name="subject"></param>
		public ConcreteObserver(InvokerSubjectContext subject){
			this.subject = subject;
			observerState = "positive";
		}

		public override void Update(){
            if (observerState.Equals("positive"))
            {
				observerState = "negative";
                Console.WriteLine("CHANGE OF STATE AT " + (subject as InvokerSubjectContext).House);
				return;
            }
			observerState = "positive";
			Console.WriteLine("CHANGE OF STATE AT " + (subject as InvokerSubjectContext).House);
		}

	}//end ConcreteObserver

}//end namespace Patterns